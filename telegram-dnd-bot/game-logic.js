const deepseek = require('./deepseek');
const { ASLAN_SYSTEM_PROMPT } = require('./deepseek');
const moment = require('moment-timezone');

// –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏–Ω–¥–∏–∫–∞—Ç–∞
let gameState = {};

function getDefaultState() {
  return {
    day: 1,
    money: 10000,
    reputation: 5,
    problems: [],
    allies: {},
    enemies: {},
    history: [],
    active_situation: {
      message_id: null,
      text: '',
      responses: [],
      deadline: null
    },
    personal_dialogs: {} // user_id: [{from, text, timestamp}]
  };
}

function saveState(chatId, state, db) {
  gameState[chatId] = state;
  db.saveState(chatId, state);
}

async function loadState(chatId, db) {
  if (gameState[chatId]) return gameState[chatId];
  const state = await db.loadState(chatId);
  if (state) gameState[chatId] = state;
  return state || getDefaultState();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (—É—Ç—Ä–æ/–≤–µ—á–µ—Ä)
async function createSituation(bot, chatId, db, logger, timeOfDay) {
  const state = await loadState(chatId, db);
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const context = {
    day: state.day,
    recent_events: state.history.slice(-5),
    ongoing_problems: state.problems,
    relationships: {
      allies: state.allies,
      enemies: state.enemies
    }
  };
  const prompt = `–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –¥–Ω—è ${state.day} (${timeOfDay}).\n–£—á—Ç–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: ${JSON.stringify(context.recent_events)}\n–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${JSON.stringify(context.ongoing_problems)}\n–°–∏—Ç—É–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—á–Ω–æ –≤—ã—Ç–µ–∫–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π. –ù–ï –¥–∞–≤–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, —Ç–æ–ª—å–∫–æ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é.`;
  const situationText = await deepseek.askDeepSeek([
    { role: 'user', content: prompt }
  ]);
  const msg = await bot.sendMessage(chatId, situationText);
  state.active_situation = {
    message_id: msg.message_id,
    text: situationText,
    responses: [],
    deadline: moment().add(2, 'hours').toISOString()
  };
  saveState(chatId, state, db);
}

// –°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–π
async function handleMessage(bot, message, db, logger) {
  if (message.reply_to_message && message.reply_to_message.from && message.reply_to_message.from.id === (await bot.getMe()).id) {
    const chatId = message.chat.id;
    const state = await loadState(chatId, db);
    if (!state.active_situation || state.active_situation.message_id !== message.reply_to_message.message_id) return;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    state.active_situation.responses.push({
      player_name: message.from.first_name,
      user_id: message.from.id,
      response: message.text
    });
    saveState(chatId, state, db);
    bot.replyTo(message, `–≠, ${message.from.first_name}, –ø–æ–Ω—è–ª —Ç—ç–±—è, –±—Ä–∞—Ç! –ò–Ω—Ç—ç—Ä—ç—Å–Ω–∞—è –∏–¥–µ—è... ü§î`);
  }
}

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ê—Å–ª–∞–Ω—É
async function handlePersonalMention(bot, message, db, logger) {
  const chatId = message.chat.id;
  const userId = message.from.id;
  const state = await loadState(chatId, db);
  state.personal_dialogs[userId] = state.personal_dialogs[userId] || [];
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
  state.personal_dialogs[userId].push({
    from: 'user',
    text: message.text,
    timestamp: Date.now()
  });
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
  const dialogHistory = state.personal_dialogs[userId].slice(-5).map(d => (d.from === 'user' ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${d.text}` : `–ê—Å–ª–∞–Ω: ${d.text}`)).join('\n');
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
  const prompt = `–¢—ã ‚Äî –ê—Å–ª–∞–Ω "–°—Ö–µ–º–∞". –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ —Ç–µ–±–µ –ª–∏—á–Ω–æ. –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:\n${dialogHistory}\n\n–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º, –≤ —Å–≤–æ—ë–º —Å—Ç–∏–ª–µ. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –¥–µ–Ω–µ–≥, —Å—Ö–µ–º, —Å–∏–Ω–¥–∏–∫–∞—Ç–∞ –∏–ª–∏ —Å—é–∂–µ—Ç–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.`;
  const reply = await deepseek.askDeepSeek([
    { role: 'user', content: prompt }
  ]);
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ê—Å–ª–∞–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
  state.personal_dialogs[userId].push({
    from: 'aslan',
    text: reply,
    timestamp: Date.now()
  });
  saveState(chatId, state, db);
  await bot.sendMessage(chatId, `@${message.from.username || message.from.first_name}, ${reply}`);
  // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —è–≤–Ω–æ —Å–≤—è–∑–∞–Ω —Å —Å—é–∂–µ—Ç–æ–º ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–∏–Ω–¥–∏–∫–∞—Ç–∞
  if (/–¥–µ–Ω—å–≥|—Å–∏–Ω–¥–∏–∫–∞—Ç|—Å—Ö–µ–º|–ø—Ä–æ–±–ª–µ–º|—Å—é–∂–µ—Ç|–∏—Å—Ç–æ—Ä–∏|–¥–µ–ª–æ|–±—Ä–∞—Ç–≤–∞|–≤—Ä–∞–≥|—Å–æ—é–∑–Ω–∏–∫|–ø–ª–∞–Ω/i.test(message.text)) {
    state.history.push({
      day: state.day,
      event: `[–õ–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å @${message.from.username || message.from.first_name}]: ${message.text} => ${reply}`,
      player_decisions: [],
      consequences: null,
      timestamp: Date.now()
    });
    saveState(chatId, state, db);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
async function processSituationResults(bot, chatId, db, logger) {
  const state = await loadState(chatId, db);
  const responses = state.active_situation.responses;
  const context = {
    history: state.history.slice(-10),
    current_state: {
      money: state.money,
      reputation: state.reputation,
      problems: state.problems
    },
    player_responses: responses,
    character: '–ê—Å–ª–∞–Ω –°—Ö–µ–º–∞'
  };
  const prompt = `–¢—ã –ê—Å–ª–∞–Ω –°—Ö–µ–º–∞. –í–æ—Ç —Ç–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å–∏–Ω–¥–∏–∫–∞—Ç–∞:\n${JSON.stringify(context)}\n\n–ò–≥—Ä–æ–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ:\n${responses.map(r => r.player_name + ': ' + r.response).join('\n')}\n\n–°–æ–∑–¥–∞–π —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π, —É—á–∏—Ç—ã–≤–∞—è –í–°–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–º–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –∏ —é–º–æ—Ä–æ–º.`;
  const resultText = await deepseek.askDeepSeek([
    { role: 'user', content: prompt }
  ]);
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
  state.history.push({
    day: state.day,
    event: resultText,
    player_decisions: responses,
    consequences: null,
    timestamp: moment().toISOString()
  });
  // –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
  state.day += 1;
  state.active_situation = {
    message_id: null,
    text: '',
    responses: [],
    deadline: null
  };
  saveState(chatId, state, db);
  await bot.sendMessage(chatId, resultText);
}

// –ö–æ–º–∞–Ω–¥—ã –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
async function showHistory(bot, message, db) {
  const state = await loadState(message.chat.id, db);
  const history = state.history.slice(-10).map(e => `–î–µ–Ω—å ${e.day}: ${e.event}`).join('\n');
  await bot.sendMessage(message.chat.id, history || '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞, –±—Ä–∞—Ç.');
}

async function showRelationships(bot, message, db) {
  const state = await loadState(message.chat.id, db);
  const allies = Object.keys(state.allies).length ? Object.keys(state.allies).join(', ') : '–Ω–µ—Ç —Å–æ—é–∑–Ω–∏–∫–æ–≤';
  const enemies = Object.keys(state.enemies).length ? Object.keys(state.enemies).join(', ') : '–Ω–µ—Ç –≤—Ä–∞–≥–æ–≤';
  await bot.sendMessage(message.chat.id, `–°–æ—é–∑–Ω–∏–∫–∏: ${allies}\n–í—Ä–∞–≥–∏: ${enemies}`);
}

module.exports = {
  getDefaultState,
  createSituation,
  handleMessage,
  handlePersonalMention,
  processSituationResults,
  showHistory,
  showRelationships,
  gameState
};
